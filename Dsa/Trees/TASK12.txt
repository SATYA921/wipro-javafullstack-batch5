Implement a binary tree in Java supporting insertion, deletion, and traversal operations. Ensure the tree can handle basic operations efficiently and provide methods for inorder, preorder, and postorder traversals.
-------------------------------------------------------------------------------

class BinaryTree {
    // Node class representing each node in the tree
    class Node {
        int key;
        Node left, right;

        public Node(int item) {
            key = item;
            left = right = null;
        }
    }

    // Root of the Binary Tree
    Node root;

    // Constructor
    BinaryTree() {
        root = null;
    }

    // Insert a new key in the tree
    void insert(int key) {
        root = insertRec(root, key);
    }

    // A recursive function to insert a new key in the tree
    Node insertRec(Node root, int key) {
        // If the tree is empty, return a new node
        if (root == null) {
            root = new Node(key);
            return root;
        }

        // Otherwise, recur down the tree
        if (key < root.key)
            root.left = insertRec(root.left, key);
        else if (key > root.key)
            root.right = insertRec(root.right, key);

        // Return the (unchanged) node pointer
        return root;
    }

    // Delete a key from the tree
    void deleteKey(int key) {
        root = deleteRec(root, key);
    }

    // A recursive function to delete a key from the tree
    Node deleteRec(Node root, int key) {
        // Base case: if the tree is empty
        if (root == null) return root;

        // Otherwise, recur down the tree
        if (key < root.key)
            root.left = deleteRec(root.left, key);
        else if (key > root.key)
            root.right = deleteRec(root.right, key);

        // If key is same as root's key, then this is the node to be deleted
        else {
            // Node with only one child or no child
            if (root.left == null)
                return root.right;
            else if (root.right == null)
                return root.left;

            // Node with two children: Get the inorder successor (smallest in the right subtree)
            root.key = minValue(root.right);

            // Delete the inorder successor
            root.right = deleteRec(root.right, root.key);
        }

        return root;
    }

    // A utility function to find the smallest value in a tree
    int minValue(Node root) {
        int minValue = root.key;
        while (root.left != null) {
            minValue = root.left.key;
            root = root.left;
        }
        return minValue;
    }

    // Inorder traversal
    void inorder() {
        inorderRec(root);
    }

    // A utility function to do inorder traversal of the tree
    void inorderRec(Node root) {
        if (root != null) {
            inorderRec(root.left);
            System.out.print(root.key + " ");
            inorderRec(root.right);
        }
    }

    // Preorder traversal
    void preorder() {
        preorderRec(root);
    }

    // A utility function to do preorder traversal of the tree
    void preorderRec(Node root) {
        if (root != null) {
            System.out.print(root.key + " ");
            preorderRec(root.left);
            preorderRec(root.right);
        }
    }

    // Postorder traversal
    void postorder() {
        postorderRec(root);
    }

    // A utility function to do postorder traversal of the tree
    void postorderRec(Node root) {
        if (root != null) {
            postorderRec(root.left);
            postorderRec(root.right);
            System.out.print(root.key + " ");
        }
    }

    // Driver method to test the above functions
    public static void main(String[] args) {
        BinaryTree tree = new BinaryTree();

        // Insert nodes
        tree.insert(50);
        tree.insert(30);
        tree.insert(20);
        tree.insert(40);
        tree.insert(70);
        tree.insert(60);
        tree.insert(80);

        System.out.println("Inorder traversal:");
        tree.inorder(); // Should print: 20 30 40 50 60 70 80

        System.out.println("\nPreorder traversal:");
        tree.preorder(); // Should print: 50 30 20 40 70 60 80

        System.out.println("\nPostorder traversal:");
        tree.postorder(); // Should print: 20 40 30 60 80 70 50

        System.out.println("\nDeleting 20");
        tree.deleteKey(20);
        System.out.println("Inorder traversal after deletion:");
        tree.inorder(); // Should print: 30 40 50 60 70 80

        System.out.println("\nDeleting 30");
        tree.deleteKey(30);
        System.out.println("Inorder traversal after deletion:");
        tree.inorder(); // Should print: 40 50 60 70 80

        System.out.println("\nDeleting 50");
        tree.deleteKey(50);
        System.out.println("Inorder traversal after deletion:");
        tree.inorder(); // Should print: 40 60 70 80
    }
}
