KMP ALGORITHM
-------------

package pattern_Searching_Algorithms;

public class KMPSearch {
	private final int R;
	private int[][] dfa;
	private char[] pattern;
	
	public KMPSearch(String pattern) {
		this.R=256;
		this.pattern=pattern.toCharArray();
		int m=pattern.length();
		dfa=new int[R][m];
		
		dfa[pattern.charAt(0)][0]=1;
		for(int x=0,j=1;j<m;j++) {
			for(int c=0;c<R;c++) {
				dfa[c][j]=dfa[c][x];
			}
			dfa[pattern.charAt(j)][j]=j+1;
			
			x=dfa[pattern.charAt(j)][x];
			
		}
	}
	public void search(String text) {
		int n=text.length();
		int m=pattern.length;
		int i,j;
		
		for(i=0,j=0;i<n&&j<m;i++) {
			j=dfa[text.charAt(i)][j];
		}
		
		if(j==m) {
			System.out.println("Pattern Found at Index: "+(i-m));
		}
		else {
			System.out.println("Pattern NOT Found!");
		}
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String text="ABABDABAABDCABCDABCDAAAD";
		String pattern="ABCD";
		KMPSearch kmp=new KMPSearch(pattern);
		kmp.search(text);
	}

}
