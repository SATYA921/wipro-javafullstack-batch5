RABIN KARP PATTERN SEARCH ALGORITHM
-----------------------------------

package pattern_Searching_Algorithms;

public class RabinKarpPatternSearch {
	private final int d=256;//highest value of character set (For alphabets =256)
	private final int q=251;//prime number(highest)
	
	void search(String pattern, String text) {
		int m=pattern.length();
		int n=text.length();
		int p=0;
		int t=0;
		int h=1;
		//calculating hash function
		for(int i=0;i<m-1;i++) {
			h=(h*d)%q;
		}
		//calculating hash value for pattern and text
		for(int i=0;i<m;i++) {
			p=(d*p+pattern.charAt(i))%q;
			t=(d*t+text.charAt(i))%q;
		}
		//checking for matching hash value
		for(int i=0;i<n-m;i++) {
			if(p==t) {
				boolean match=true;
				for(int j=0;j<m;j++) {
					if(text.charAt(i+j)!=pattern.charAt(j)) {
						match=false;
						break;
					}
				}
				if(match) {
					System.out.println("Pattern found at index: "+i);
				}
			}
			if(i<n-m) {
				t=(d*(t-text.charAt(i)*h) +text.charAt(i+m))%q;
				if(t<0) {
					t=t+q;
				}
			}
		}
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String text="ABBCCDDAAEEGGHHIIABCDIF";
		String pattern="ABCD";
		RabinKarpPatternSearch obj=new RabinKarpPatternSearch();
		obj.search(pattern,text);
	}

}
