Implement the Bellman-Ford algorithm in Java to find the shortest paths from a single source vertex to all other vertices in a weighted directed graph with negative edge weights.
------------------------------------------------------------------------------

package shortestPath;

import java.util.Arrays;

class Edge1{
	int src,dest,weight;

	public Edge1(int src, int dest, int weight) {
		super();
		this.src = src;
		this.dest = dest;
		this.weight = weight;
	}

}

public class BellmanFordsAlgo{
	
	int vertices,edges;
	Edge1[] edge;
	
	public BellmanFordsAlgo(int vertices, int edges) {
		super();
		this.vertices = vertices;
		this.edges = edges;
		edge=new Edge1[edges];
		for(int i=0;i<edges;i++) {
			edge[i]=new Edge1(0,0,0);
		}
	}
		
		void bellmanFord(BellmanFordsAlgo graph,int src) {
			int V=graph.vertices, E=graph.edges;
			int[] dist=new int[V];
			
			Arrays.fill(dist, Integer.MAX_VALUE);
			dist[src]=0;
			for(int i=1;i<V;i++) {
				for(int j=0;j<E;j++) {
					
					int u=graph.edge[j].src;
					int v=graph.edge[j].dest;
					int w=graph.edge[j].weight;
					
					if(dist[u]!=Integer.MAX_VALUE && dist[u]+w<dist[v]) {
						dist[v]=dist[u]+w;
					}
				}
			}
				
			for (int j = 0; j < E; ++j) {
				int u = graph.edge[j].src;
				int v = graph.edge[j].dest;
		        int weight = graph.edge[j].weight;
		        if (dist[u] != Integer.MAX_VALUE && dist[u] + weight < dist[v]) {
		        	System.out.println("Graph contains negative weight cycle");
		        }
			}

		    printArr(dist,V,src);
			
		}
			
		void printArr(int[] dist, int V, int src) {
			System.out.println("Shortest Distance from Source: "+ src);
			System.out.println("-----------------------");
			System.out.println("Vertex  ---->  Distance ");
			System.out.println("-----------------------");
			
			for (int i = 0; i < V; ++i) {
				System.out.println(i + "	---->	  " + dist[i]);
			 }
		}
		

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int vertices=5;
		int edges=8;
		
		BellmanFordsAlgo graph=new BellmanFordsAlgo(vertices,edges);
		graph.edge[0] = new Edge1(0, 1, -1);
        graph.edge[1] = new Edge1(0, 2, 4);
        graph.edge[2] = new Edge1(1, 2, 3);
        graph.edge[3] = new Edge1(1, 3, 2);
        graph.edge[4] = new Edge1(1, 4, 2);
        graph.edge[5] = new Edge1(3, 2, 5);
        graph.edge[6] = new Edge1(3, 1, 1);
        graph.edge[7] = new Edge1(4, 3, -3);

        
        graph.bellmanFord(graph, 0);
	}

}

