Implement Dijkstra's algorithm in Java to find the shortest path in a weighted graph from a source vertex to all other vertices.
------------------------------------------------------------------------------

import java.util.*;

class Graph {
    private int V; // Number of vertices
    private List<List<Node>> adj; // Adjacency list

    class Node implements Comparator<Node> {
        public int vertex;
        public int weight;

        public Node() {}

        public Node(int vertex, int weight) {
            this.vertex = vertex;
            this.weight = weight;
        }

        @Override
        public int compare(Node node1, Node node2) {
            return Integer.compare(node1.weight, node2.weight);
        }
    }

    // Constructor
    public Graph(int V) {
        this.V = V;
        adj = new ArrayList<>(V);
        for (int i = 0; i < V; i++) {
            adj.add(new LinkedList<>());
        }
    }

    // Add edge to the graph
    public void addEdge(int src, int dest, int weight) {
        adj.get(src).add(new Node(dest, weight));
        adj.get(dest).add(new Node(src, weight)); // For undirected graph
    }

    // Dijkstra's algorithm to find the shortest path
    public void dijkstra(int src) {
        int[] dist = new int[V]; // Output array. dist[i] will hold the shortest distance from src to i

        // Min heap priority queue
        PriorityQueue<Node> pq = new PriorityQueue<>(V, new Node());

        // Initialize all distances as infinite
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[src] = 0;

        // Add source node to the priority queue
        pq.add(new Node(src, 0));

        while (!pq.isEmpty()) {
            // Remove the vertex with the smallest distance from the priority queue
            int u = pq.poll().vertex;

            // Iterate over the adjacent vertices of the dequeued vertex
            for (Node node : adj.get(u)) {
                int v = node.vertex;
                int weight = node.weight;

                // If there is a shorter path to v through u
                if (dist[u] + weight < dist[v]) {
                    dist[v] = dist[u] + weight;
                    pq.add(new Node(v, dist[v]));
                }
            }
        }

        // Print the shortest path from source to all vertices
        printSolution(dist);
    }

    // Print the solution
    private void printSolution(int[] dist) {
        System.out.println("Vertex \t\t Distance from Source");
        for (int i = 0; i < V; i++) {
            System.out.println(i + " \t\t " + dist[i]);
        }
    }

    // Driver code
    public static void main(String[] args) {
        int V = 9;
        Graph graph = new Graph(V);

        graph.addEdge(0, 1, 4);
        graph.addEdge(0, 7, 8);
        graph.addEdge(1, 2, 8);
        graph.addEdge(1, 7, 11);
        graph.addEdge(2, 3, 7);
        graph.addEdge(2, 8, 2);
        graph.addEdge(2, 5, 4);
        graph.addEdge(3, 4, 9);
        graph.addEdge(3, 5, 14);
        graph.addEdge(4, 5, 10);
        graph.addEdge(5, 6, 2);
        graph.addEdge(6, 7, 1);
        graph.addEdge(6, 8, 6);
        graph.addEdge(7, 8, 7);

        int source = 0;
        graph.dijkstra(source);
    }
}


