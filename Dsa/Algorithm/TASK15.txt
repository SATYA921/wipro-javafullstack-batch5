Implement the Floyd-Warshall algorithm in Java to find the shortest paths between all pairs of vertices in a weighted graph.
--------------------------------------------------------------------------


package shortestPath;

public class FloydWarshall {
	final static int INF=99999;
	final static int V=4;
	
	private void floydWarshall(int[][] graph) {
		// TODO Auto-generated method stub
		int dist[][]=new int[V][V];
		int i,j,k;
		
		for(i=0;i<V;i++) {
			for(j=0;j<V;j++) {
				dist[i][j]=graph[i][j];
			}
		}
		
		for(k=0;k<V;k++) {
			for(i=0;i<V;i++) {
				for(j=0;j<V;j++) {
					if(dist[i][k]+dist[k][j]<dist[i][j]) {
						dist[i][j]=dist[i][k]+dist[k][j];
					}
				}
			}
		}
		System.out.println("Shortest Distance Matrix:");
		printGraph(dist);
	}
	public static void printGraph(int dist[][]) {
		
		for(int i=0;i<V;i++) {
			for(int j=0;j<V;j++) {
				if(dist[i][j]==INF)
					System.out.print("INF ");
				else
					System.out.print(dist[i][j]+"  ");
			}
			System.out.println();
			
		}
		
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int graph[][]= {
						{0, 10, 1, INF},
						{10, 0, INF, 2},
						{1, INF, 0, 1},
						{INF, 2, 1, 0}
						};
		
		System.out.println("Original Distance Matrix:");
		printGraph(graph);
		System.out.println("-------------------------");
		FloydWarshall obj=new FloydWarshall();
		
		obj.floydWarshall(graph);
	}

	

}
