Implement Kruskal's algorithm in Java to find the Minimum Spanning Tree (MST) of a given undirected, weighted graph.
-----------------------------------------------------------------------------

package shortestPath;

import java.util.Arrays;

class Edge implements Comparable<Edge>{
	int src,dest,weight;
	public Edge(int src,int dest,int weight) {
		
		this.src=src;
		this.dest=dest;
		this.weight=weight;
	}
	public int compareTo(Edge compareEdge) {
		return this.weight-compareEdge.weight;
	}
}

class Subset {
    int parent, rank;
}

public class KruskalsAlgo{
	int vertices,edges;
	
    Edge[] edge;

    
    KruskalsAlgo(int v, int e) {
        vertices = v;
        edges = e;
        edge = new Edge[edges];
        for (int i = 0; i < e; ++i) {
            edge[i] = new Edge(0,0,0);
        }
    }
    
    int find(Subset[] subsets, int i) {
        if (subsets[i].parent != i)
            subsets[i].parent = find(subsets, subsets[i].parent);
        return subsets[i].parent;
    }
	
    void union(Subset[] subsets, int x, int y) {
        int xroot = find(subsets, x);
        int yroot = find(subsets, y);

        if (subsets[xroot].rank < subsets[yroot].rank)
            subsets[xroot].parent = yroot;
        else if (subsets[xroot].rank > subsets[yroot].rank)
            subsets[yroot].parent = xroot;
        else {
            subsets[yroot].parent = xroot;
            subsets[xroot].rank++;
        }
    }
    
    void kruskalMST() {
        Edge[] result = new Edge[vertices]; // Tnis will store the resultant MST
        int e = 0; // An index variable, used for result[]
        int i = 0; // An index variable, used for sorted edges
        for (i = 0; i < vertices; ++i)
            result[i] = new Edge(0,0,0);

        // Step 1: Sort all the edges in non-decreasing order of their weight
        Arrays.sort(edge);

        // Allocate memory for creating V ssubsets
        Subset[] subsets = new Subset[vertices];
        for (i = 0; i < vertices; ++i)
            subsets[i] = new Subset();

        // Create V subsets with single elements
        for (int v = 0; v < vertices; ++v) {
            subsets[v].parent = v;
            subsets[v].rank = 0;
        }

        i = 0; // Index used to pick next edge

        // Number of edges to be taken is equal to V-1
        while (e < vertices - 1) {
            // Step 2: Pick the smallest edge. And increment the index for next iteration
            Edge next_edge = edge[i++];

            int x = find(subsets, next_edge.src);
            int y = find(subsets, next_edge.dest);

            // If including this edge does not cause cycle, include it in result
            // and increment the index of result for next edge
            if (x != y) {
                result[e++] = next_edge;
                union(subsets, x, y);
            }
            // Else discard the next_edge
        }

        // print the contents of result[] to display the built MST
        System.out.println("Following are the edges in the constructed MST");
        int minimumCost = 0;
        for (i = 0; i < e; ++i) {
            System.out.println(result[i].src + " -- " + result[i].dest + " = " + result[i].weight);
            minimumCost += result[i].weight;
        }
        System.out.println("Minimum Cost Spanning Tree " + minimumCost);
    }

	public static void main(String args[]) {
		int vertices=9;
		int edges=14;
		
		KruskalsAlgo graph=new KruskalsAlgo(vertices,edges);
		
		
		graph.edge[0]=new Edge(7,6,1);
		
		graph.edge[1]=new Edge(8,2,2);
		graph.edge[2]=new Edge(6,2,2);
		
		graph.edge[3]=new Edge(5,2,4);
		graph.edge[4]=new Edge(0,1,4);
	
		graph.edge[5]=new Edge(8,6,6);
		
		graph.edge[6]=new Edge(2,3,7);
		graph.edge[7]=new Edge(7,8,7);
	
		graph.edge[8]=new Edge(0,7,8);
		graph.edge[9]=new Edge(1,2,8);
		
		graph.edge[10]=new Edge(3,4,9);
		
		graph.edge[11]=new Edge(5,4,10);
		
		graph.edge[12]=new Edge(1,7,11);
		
		graph.edge[13]=new Edge(3,5,14);
		
		
		graph.kruskalMST();
	}
}