"Implement an undirected graph in Java with the following functionalities:

Graph Class: Create a Graph class that supports:
Adding vertices and edges.
Removing vertices and edges.
Checking if vertices and edges exist.
Performing graph traversal algorithms like Depth-First Search (DFS) or Breadth-First Search (BFS)."
-------------------------------------------------------------------------------


import java.util.*;

class Graph {
    private Map<Integer, List<Integer>> adjList;

    // Constructor
    public Graph() {
        adjList = new HashMap<>();
    }

    // Add a vertex to the graph
    public void addVertex(int vertex) {
        adjList.putIfAbsent(vertex, new ArrayList<>());
    }

    // Add an edge to the graph
    public void addEdge(int vertex1, int vertex2) {
        adjList.putIfAbsent(vertex1, new ArrayList<>());
        adjList.putIfAbsent(vertex2, new ArrayList<>());
        adjList.get(vertex1).add(vertex2);
        adjList.get(vertex2).add(vertex1); // Since the graph is undirected
    }

    // Remove a vertex from the graph
    public void removeVertex(int vertex) {
        adjList.values().forEach(e -> e.remove(Integer.valueOf(vertex)));
        adjList.remove(vertex);
    }

    // Remove an edge from the graph
    public void removeEdge(int vertex1, int vertex2) {
        List<Integer> eV1 = adjList.get(vertex1);
        List<Integer> eV2 = adjList.get(vertex2);
        if (eV1 != null) eV1.remove(Integer.valueOf(vertex2));
        if (eV2 != null) eV2.remove(Integer.valueOf(vertex1));
    }

    // Check if a vertex exists in the graph
    public boolean containsVertex(int vertex) {
        return adjList.containsKey(vertex);
    }

    // Check if an edge exists in the graph
    public boolean containsEdge(int vertex1, int vertex2) {
        return adjList.get(vertex1).contains(vertex2) && adjList.get(vertex2).contains(vertex1);
    }

    // Depth-First Search (DFS) traversal
    public void DFS(int start) {
        Set<Integer> visited = new HashSet<>();
        DFSUtil(start, visited);
    }

    private void DFSUtil(int vertex, Set<Integer> visited) {
        visited.add(vertex);
        System.out.print(vertex + " ");
        for (int neighbor : adjList.get(vertex)) {
            if (!visited.contains(neighbor)) {
                DFSUtil(neighbor, visited);
            }
        }
    }

    // Breadth-First Search (BFS) traversal
    public void BFS(int start) {
        Set<Integer> visited = new HashSet<>();
        Queue<Integer> queue = new LinkedList<>();
        visited.add(start);
        queue.add(start);

        while (!queue.isEmpty()) {
            int vertex = queue.poll();
            System.out.print(vertex + " ");
            for (int neighbor : adjList.get(vertex)) {
                if (!visited.contains(neighbor)) {
                    visited.add(neighbor);
                    queue.add(neighbor);
                }
            }
        }
    }

    // Print the adjacency list of the graph
    public void printGraph() {
        for (int vertex : adjList.keySet()) {
            System.out.print(vertex + ": ");
            for (int neighbor : adjList.get(vertex)) {
                System.out.print(neighbor + " ");
            }
            System.out.println();
        }
    }

    // Driver code
    public static void main(String[] args) {
        Graph graph = new Graph();
        graph.addVertex(0);
        graph.addVertex(1);
        graph.addVertex(2);
        graph.addVertex(3);

        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 2);
        graph.addEdge(2, 3);

        System.out.println("Graph:");
        graph.printGraph();

        System.out.println("DFS starting from vertex 0:");
        graph.DFS(0);

        System.out.println("\nBFS starting from vertex 0:");
        graph.BFS(0);

        System.out.println("\nContains vertex 1: " + graph.containsVertex(1));
        System.out.println("Contains edge between 1 and 2: " + graph.containsEdge(1, 2));

        graph.removeEdge(1, 2);
        System.out.println("Graph after removing edge between 1 and 2:");
        graph.printGraph();

        graph.removeVertex(2);
        System.out.println("Graph after removing vertex 2:");
        graph.printGraph();
    }
}
